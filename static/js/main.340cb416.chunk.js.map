{"version":3,"sources":["Components/Counter1/OutputBlock/OutputBlock.module.css","Components/Navbar/Navbar.module.css","Components/InputForSettings/InputForSettings.module.css","Components/Counter2/OutputBlock/OutputBlock.module.css","Components/Counter1/Counter1.module.css","App.module.css","Components/Counter1/SettingsBlock/SettingsBlock.module.css","Components/Counter1/SettingsBlock/ButtonsAreaSettingsBlock/ButtonsAreaSettingsBlock.module.css","Components/Button/Button.module.css","Components/InputsAreaSettingsBlock/InputsAreaSettingsBlock.module.css","Components/Counter2/SettingsBlock/SettingsBlock.module.css","Components/Counter2/SettingsBlock/ButtonsAreaSettingsBlock/ButtonsAreaSettingsBlock.module.css","Components/Navbar/Navbar.jsx","redux/counter1Reducer.js","Components/Button/Button.jsx","Components/Counter1/SettingsBlock/ButtonsAreaSettingsBlock/ButtonsAreaSettingsBlock.jsx","Components/InputForSettings/InputForSettings.jsx","Components/InputsAreaSettingsBlock/InputsAreaSettingsBlock.jsx","Components/Counter1/SettingsBlock/SettingsBlock.jsx","Components/Counter1/OutputBlock/OutputBlock.jsx","Components/Counter1/Counter1.jsx","Components/Counter1/Counter1Container.jsx","Components/Counter2/SettingsBlock/ButtonsAreaSettingsBlock/ButtonsAreaSettingsBlock.jsx","Components/Counter2/SettingsBlock/SettingsBlock.jsx","Components/Counter2/OutputBlock/OutputBlock.jsx","Components/Counter2/Counter2.jsx","redux/counter2Reducer.js","Components/Counter2/Counter2Container.jsx","App.jsx","serviceWorker.js","redux/store.js","index.js"],"names":["module","exports","Navbar","className","style","navbar","item","to","activeClassName","active","UPDATE_MAX_VALUE","SET_SAVED_VALUE","initialState","startValue","maxValue","currentValue","isDisableSetButton","isDisableIncButton","isDisableResetButton","Button","props","button","onClick","disabled","title","ButtonsAreaSettingsBlock","buttonsArea","setCounterValue","InputForSettings","classNameInput","isInputError","input","error","inputForSettings","inputTitle","type","onChange","e","value","Number","currentTarget","inputValue","InputsAreaSettingsBlock","inputMaxValueError","inputStartValueError","inputsArea","updateMaxValue","updateStarsValue","SettingsBlock","settingsBlock","OutputBlock","isCorrect","outputClass","outputValue","outputValueMax","isSettingValues","isErrorSettingValues","outputBlock","outputValueWrapper","outputValueText","outputValueTextError","buttonsWrapper","incrementCurrentValue","resetCounterValue","Counter1","counterWrapper","state","Counter1Container","componentDidMount","restoreState","saveState","stateAsString","JSON","stringify","localStorage","setItem","getItem","parse","setSavedValues","setResetCounterValueSettings","this","React","Component","ConnectCounter1","connect","counter1Page","newValue","showSettingsBlock","Counter2","isShow","isShowSettingsBlock","Counter2Container","ConnectCounter2","counter2Page","App","installText","path","render","Boolean","window","location","hostname","match","reducers","combineReducers","action","store","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.340cb416.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"outputBlock\":\"OutputBlock_outputBlock__3xNCy\",\"outputValueWrapper\":\"OutputBlock_outputValueWrapper__2s9z9\",\"outputValue\":\"OutputBlock_outputValue__5iwOp\",\"outputValueMax\":\"OutputBlock_outputValueMax__2Xclv\",\"outputValueText\":\"OutputBlock_outputValueText__3OAdr\",\"outputValueTextError\":\"OutputBlock_outputValueTextError__1xIIA\",\"buttonsWrapper\":\"OutputBlock_buttonsWrapper__3xttx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__2HW4X\",\"item\":\"Navbar_item__3L0tr\",\"active\":\"Navbar_active__UtoJW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputForSettings\":\"InputForSettings_inputForSettings__1nQiW\",\"inputTitle\":\"InputForSettings_inputTitle__sVhtz\",\"input\":\"InputForSettings_input__3sf_y\",\"error\":\"InputForSettings_error__1rlT4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"outputBlock\":\"OutputBlock_outputBlock__3vXCk\",\"outputValueWrapper\":\"OutputBlock_outputValueWrapper__MAV7t\",\"outputValue\":\"OutputBlock_outputValue__aZKAf\",\"outputValueMax\":\"OutputBlock_outputValueMax__1RJM4\",\"outputValueText\":\"OutputBlock_outputValueText__2bpud\",\"outputValueTextError\":\"OutputBlock_outputValueTextError__2NZ4B\",\"buttonsWrapper\":\"OutputBlock_buttonsWrapper__3IVHa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterWrapper\":\"Counter1_counterWrapper__6YQVi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1qccB\",\"installText\":\"App_installText__1pZNI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsBlock\":\"SettingsBlock_settingsBlock__1jAsu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonsArea\":\"ButtonsAreaSettingsBlock_buttonsArea__3jzWU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__10iAS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputsArea\":\"InputsAreaSettingsBlock_inputsArea__27PBt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsBlock\":\"SettingsBlock_settingsBlock__2ouG3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonsArea\":\"ButtonsAreaSettingsBlock_buttonsArea__QWHpn\"};","import React from 'react';\nimport style from './Navbar.module.css';\nimport {NavLink} from \"react-router-dom\";\n\nfunction Navbar() {\n  return (\n    <div className={style.navbar}>\n      <div className={style.item}>\n        <NavLink to='/counter1' activeClassName={style.active}>Counter v2.0</NavLink>\n      </div>\n      <div className={style.item}>\n        <NavLink to='/counter2' activeClassName={style.active}>Counter v2.0.1</NavLink>\n      </div>\n    </div>\n  );\n}\n\nexport default Navbar;\n","const INCREMENT_CURRENT_VALUE = \"counter1/reducer/INCREMENT_CURRENT_VALUE\"\r\nconst SET_RESET_COUNTER_VALUES = \"counter1/reducer/SET_RESET_COUNTER_VALUES\"\r\nconst UPDATE_START_VALUE = \"counter1/reducer/UPDATE_START_VALUE\"\r\nconst UPDATE_MAX_VALUE = \"counter1/reducer/UPDATE_MAX_VALUE\"\r\nconst SET_SAVED_VALUE = \"counter1/reducer/SET_SAVED_VALUE\"\r\n\r\n\r\nlet initialState = {\r\n    startValue: 0,\r\n    maxValue: 5,\r\n    currentValue: 0,\r\n    isDisableSetButton: true,\r\n    isDisableIncButton: false,\r\n    isDisableResetButton: false\r\n}\r\n\r\nexport const counter1Reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case INCREMENT_CURRENT_VALUE:\r\n            let currentValue = state.currentValue + 1;\r\n            let isDisableIncButton = currentValue === state.maxValue;\r\n            return {\r\n                ...state,\r\n                currentValue: currentValue,\r\n                isDisableIncButton: isDisableIncButton\r\n            }\r\n        case SET_RESET_COUNTER_VALUES:\r\n            return {\r\n                ...state,\r\n                currentValue: state.startValue,\r\n                isDisableSetButton: true,\r\n                isDisableIncButton: false,\r\n                isDisableResetButton: false\r\n\r\n            }\r\n        case UPDATE_START_VALUE: {\r\n            let newValue = action.newValue;\r\n            let isDisableSetButton = (newValue < 0) || (newValue >= state.maxValue)\r\n            return {\r\n                ...state,\r\n                startValue: newValue,\r\n                isDisableSetButton: isDisableSetButton,\r\n                isDisableIncButton: true,\r\n                isDisableResetButton: true\r\n            }\r\n        }\r\n        case UPDATE_MAX_VALUE:\r\n            let newValue = action.newValue;\r\n            let startValue = state.startValue\r\n            let isDisableSetButton = (newValue < 0) || (newValue <= startValue) || (startValue < 0);\r\n            return {\r\n                ...state,\r\n                maxValue: action.newValue,\r\n                isDisableSetButton: isDisableSetButton,\r\n                isDisableIncButton: true,\r\n                isDisableResetButton: true\r\n            }\r\n        case SET_SAVED_VALUE:\r\n            debugger\r\n            return {\r\n                ...state,\r\n                startValue: action.state.startValue,\r\n                maxValue: action.state.maxValue,\r\n                currentValue: action.state.startValue\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const incrementCurrentValue = () => {\r\n    return {type: INCREMENT_CURRENT_VALUE}\r\n}\r\n\r\nexport const setResetCounterValueSettings = () => {\r\n    return {type: SET_RESET_COUNTER_VALUES};\r\n}\r\n\r\n\r\nexport const updateStarsValue = (newValue) => {\r\n    return {type: UPDATE_START_VALUE, newValue};\r\n}\r\n\r\nexport const updateMaxValue = (newValue) => {\r\n    return {type: UPDATE_MAX_VALUE, newValue};\r\n}\r\n\r\nexport const setSavedValues = (state) => {\r\n    return {type: SET_SAVED_VALUE, state};\r\n}","import React from 'react';\nimport style from './Button.module.css';\n\n\nconst Button = (props) => {\n\n   let onButtonClick =  () => {\n       props.onClick();\n   }\n\n    return (\n        <div>\n            <button className={style.button}\n                onClick={onButtonClick}\n                disabled={props.disabled}\n            >{props.title}</button>\n        </div>\n    );\n};\n\nexport default Button;\n","import React from 'react';\nimport style from './ButtonsAreaSettingsBlock.module.css';\nimport Button from \"../../../Button/Button\";\n\n\nconst ButtonsAreaSettingsBlock = (props) => {\n    return (\n        <div className={style.buttonsArea}>\n            <Button title={'set'}\n                    onClick={props.setCounterValue}\n                    disabled={props.isDisableSetButton}/>\n        </div>\n\n    );\n}\n\nexport default ButtonsAreaSettingsBlock;\n","import React from 'react';\nimport style from './InputForSettings.module.css';\n\n\nconst InputForSettings = (props) => {\n    let onValueChange = (e) => {\n        let value = Number(e.currentTarget.value);\n        props.onChange(value);\n    };\n    let classNameInput = props.isInputError ? style.input + ' ' + style.error : style.input;\n\n    return (\n        <div className={style.inputForSettings}>\n            <label className={style.inputTitle}>{props.title}</label>\n            <input  type='number'\n                    className={classNameInput}\n                    onChange={onValueChange}\n                    value={props.inputValue}/>\n        </div>\n\n    );\n}\n\nexport default InputForSettings;\n","import React from 'react';\nimport style from './InputsAreaSettingsBlock.module.css';\nimport InputForSettings from \"../InputForSettings/InputForSettings\";\n\n\n\nconst InputsAreaSettingsBlock = (props) => {\n\n const   maxValue = props.maxValue;\n const   startValue = props.startValue;\n\n\n    let inputMaxValueError = startValue >= maxValue;\n    let inputStartValueError = inputMaxValueError || startValue < 0;\n\n\n    return (\n        <div className={style.inputsArea}>\n            <InputForSettings title={'max value'}\n                              isInputError={inputMaxValueError}\n                              inputValue={maxValue}\n                              onChange={props.updateMaxValue}/>\n            <InputForSettings title={'start value'}\n                              isInputError={inputStartValueError}\n                              inputValue={startValue}\n                              onChange={props.updateStarsValue}\n            />\n        </div>\n    );\n}\n\nexport default InputsAreaSettingsBlock;\n","import React from 'react';\nimport style from './SettingsBlock.module.css';\nimport ButtonsAreaSettingsBlock from \"./ButtonsAreaSettingsBlock/ButtonsAreaSettingsBlock\";\nimport InputsAreaSettingsBlock from \"../../InputsAreaSettingsBlock/InputsAreaSettingsBlock\";\n\n\nconst SettingsBlock = (props) => {\n\n\n    return (\n        <div className={style.settingsBlock}>\n            <InputsAreaSettingsBlock\n                startValue={props.startValue}\n                maxValue={props.maxValue}\n                updateStarsValue={props.updateStarsValue}\n                updateMaxValue={props.updateMaxValue}/>\n            <ButtonsAreaSettingsBlock\n                setCounterValue={props.setCounterValue}\n                isDisableSetButton={props.isDisableSetButton}/>\n\n        </div>\n    );\n}\n\nexport default SettingsBlock;\n","import React from 'react';\nimport style from './OutputBlock.module.css';\n\nimport Button from \"../../Button/Button\";\n\n\nconst OutputBlock = (props) => {\n\nconst currentValue = props.currentValue;\nconst maxValue = props.maxValue;\nconst startValue = props.startValue;\n\n\n\n    const isCorrect = props.isDisableSetButton && (maxValue > startValue) && (startValue >= 0);\n    const outputClass = currentValue < maxValue ? style.outputValue : style.outputValueMax;\n\n    const isSettingValues = !props.isDisableSetButton;\n\n    const isErrorSettingValues = (startValue >= maxValue) || (startValue < 0)\n\n\n    return (\n        <div className={style.outputBlock}>\n            <div className={style.outputValueWrapper}>\n                {isCorrect && <span className={outputClass}>{currentValue}</span>}\n                {isSettingValues && <span className={style.outputValueText}>enter values and press 'set'</span>}\n                {isErrorSettingValues && <span className={style.outputValueTextError}>Incorrect value!</span>}\n\n            </div>\n            <div className={style.buttonsWrapper}>\n                <Button title={'inc'}\n                        onClick={props.incrementCurrentValue}\n                        disabled={props.isDisableIncButton}\n                />\n                <Button title={'reset'}\n                        onClick={props.resetCounterValue}\n                        disabled={props.isDisableResetButton}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default OutputBlock;\n","import React from 'react';\nimport style from './Counter1.module.css';\nimport SettingsBlock from \"./SettingsBlock/SettingsBlock\";\nimport OutputBlock from \"./OutputBlock/OutputBlock\";\n\n\nconst Counter1 = (props) => {\n    return (\n        <div className={style.counterWrapper}>\n            <SettingsBlock startValue={props.state.startValue}\n                           maxValue={props.state.maxValue}\n                           isDisableSetButton={props.state.isDisableSetButton}\n                           setCounterValue={props.setCounterValue}\n                           updateStarsValue={props.updateStarsValue}\n                           updateMaxValue={props.updateMaxValue}\n            />\n            <OutputBlock currentValue={props.state.currentValue}\n                         startValue={props.state.startValue}\n                         maxValue={props.state.maxValue}\n                         isDisableIncButton={props.state.isDisableIncButton}\n                         isDisableSetButton={props.state.isDisableSetButton}\n                         isDisableResetButton={props.state.isDisableResetButton}\n                         resetCounterValue={props.resetCounterValue}\n                         incrementCurrentValue={props.incrementCurrentValue}\n\n            />\n        </div>\n    );\n}\n\n\nexport default Counter1;\n","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {\n    incrementCurrentValue,\n    setResetCounterValueSettings, setSavedValues,\n    updateMaxValue,\n    updateStarsValue\n} from \"../../redux/counter1Reducer\";\nimport Counter1 from \"./Counter1\";\n\nclass Counter1Container extends React.Component {\n\n    componentDidMount = () => {\n        this.restoreState()\n    };\n\n    saveState = () => {\n        debugger\n        let stateAsString = JSON.stringify(this.props.state);\n        localStorage.setItem('startSettingsCounter1', stateAsString)\n    };\n\n\n    restoreState = () => {\n        let state = this.props.state;\n        let stateAsString = localStorage.getItem('startSettingsCounter1');\n        if (stateAsString) {\n            state = JSON.parse(stateAsString);\n        }\n        this.props.setSavedValues(state);\n    };\n\n\n    setCounterValue = () => {\n        this.props.setResetCounterValueSettings();\n        this.saveState();\n    };\n\n    resetCounterValue = () => {\n        this.props.setResetCounterValueSettings();\n    }\n\n\n    render() {\n        return (\n            <Counter1 {...this.props}\n                      setCounterValue={this.setCounterValue}\n                      resetCounterValue={this.resetCounterValue}\n            />\n        )\n    }\n}\n\n\nconst mapStateToProps = (state) => {\n    return {\n        state: state.counter1Page\n    }\n};\n\n\nconst ConnectCounter1 = connect(mapStateToProps, {\n    incrementCurrentValue,\n    setResetCounterValueSettings,\n    updateStarsValue,\n    updateMaxValue,\n    setSavedValues\n})(Counter1Container);\nexport default ConnectCounter1;\n","import React from 'react';\nimport style from './ButtonsAreaSettingsBlock.module.css';\nimport Button from \"../../../Button/Button\";\n\n\nconst ButtonsAreaSettingsBlock = (props) => {\n    return (\n        <div className={style.buttonsArea}>\n            <Button title={'set'}\n                    onClick={props.setCounterValue}\n                    disabled={props.isDisableSetButton}/>\n        </div>\n\n    );\n}\n\nexport default ButtonsAreaSettingsBlock;\n","import React from 'react';\nimport style from './SettingsBlock.module.css';\nimport ButtonsAreaSettingsBlock from \"./ButtonsAreaSettingsBlock/ButtonsAreaSettingsBlock\";\nimport InputsAreaSettingsBlock from \"../../InputsAreaSettingsBlock/InputsAreaSettingsBlock\";\n\n\n\nconst SettingsBlock = (props) => {\n\n    return (\n        <div className={style.settingsBlock}>\n            <InputsAreaSettingsBlock\n                startValue={props.startValue}\n                maxValue={props.maxValue}\n                updateStarsValue={props.updateStarsValue}\n                updateMaxValue={props.updateMaxValue}/>\n            <ButtonsAreaSettingsBlock\n                setCounterValue={props.setCounterValue}\n                isDisableSetButton={props.isDisableSetButton}/>\n        </div>\n    );\n}\n\nexport default SettingsBlock;\n","import React from 'react';\nimport style from './OutputBlock.module.css';\nimport Button from \"../../Button/Button\";\n\n\nconst OutputBlock = (props) => {\n\n    const currentValue = props.currentValue;\n    const maxValue = props.maxValue;\n\n    const outputClass = currentValue < maxValue ? style.outputValue : style.outputValueMax;\n\n    return (\n        <div className={style.outputBlock}>\n            <div className={style.outputValueWrapper}>\n                <span className={outputClass}>{currentValue}</span>\n            </div>\n            <div className={style.buttonsWrapper}>\n                <Button title={'inc'}\n                        onClick={props.incrementCurrentValue}\n                        disabled={props.isDisableIncButton}\n                />\n                <Button title={'reset'}\n                        onClick={props.resetCounterValue}\n                        disabled={props.isDisableResetButton}\n                />\n                <Button title={'set'}\n                        onClick={props.showSettingsBlock}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default OutputBlock;\n","import React from 'react';\nimport style from \"../Counter1/Counter1.module.css\";\nimport SettingsBlock from \"./SettingsBlock/SettingsBlock\";\nimport OutputBlock from \"./OutputBlock/OutputBlock\";\n\n\nconst Counter2 = (props) => {\n\n    let isShow = props.state.isShowSettingsBlock;\n\n    return (\n        <div className={style.counterWrapper}>\n            {isShow && <SettingsBlock startValue={props.state.startValue}\n                                      maxValue={props.state.maxValue}\n                                      isDisableSetButton={props.state.isDisableSetButton}\n                                      setCounterValue={props.setCounterValue}\n                                      updateStarsValue={props.updateStarsValue}\n                                      updateMaxValue={props.updateMaxValue}\n            />}\n            {!isShow && <OutputBlock currentValue={props.state.currentValue}\n                                     startValue={props.state.startValue}\n                                     maxValue={props.state.maxValue}\n                                     isDisableIncButton={props.state.isDisableIncButton}\n                                     resetCounterValue={props.resetCounterValue}\n                                     incrementCurrentValue={props.incrementCurrentValue}\n                                     showSettingsBlock={props.showSettingsBlock}\n\n            />}\n        </div>\n    );\n}\n\nexport default Counter2;\n","const INCREMENT_CURRENT_VALUE = \"counter2/reducer/INCREMENT_CURRENT_VALUE\"\r\nconst SET_RESET_COUNTER_VALUES = \"counter2/reducer/SET_RESET_COUNTER_VALUES\"\r\nconst UPDATE_START_VALUE = \"counter2/reducer/UPDATE_START_VALUE\"\r\nconst UPDATE_MAX_VALUE = \"counter2/reducer/UPDATE_MAX_VALUE\"\r\nconst SHOW_SETTINGS_BLOCK = \"counter2/reducer/SHOW_SETTINGS_BLOCK\"\r\nconst SET_SAVED_VALUE = \"counter2/reducer/SET_SAVED_VALUE\"\r\n\r\nlet initialState = {\r\n    startValue: 0,\r\n    maxValue: 5,\r\n    currentValue: 0,\r\n    isDisableIncButton: false,\r\n    isDisableSetButton: false,\r\n    isShowSettingsBlock: false\r\n}\r\n\r\nexport  const counter2Reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case INCREMENT_CURRENT_VALUE:\r\n            let currentValue = state.currentValue + 1;\r\n            let isDisableIncButton = currentValue === state.maxValue;\r\n            return {\r\n                ...state,\r\n                currentValue: currentValue,\r\n                isDisableIncButton: isDisableIncButton\r\n            }\r\n        case SET_RESET_COUNTER_VALUES:\r\n            return {\r\n                ...state,\r\n                currentValue: state.startValue,\r\n                isShowSettingsBlock: false,\r\n                isDisableIncButton: false,\r\n            }\r\n        case UPDATE_START_VALUE: {\r\n            let newValue = action.newValue;\r\n            let isDisableSetButton = (newValue < 0) || (newValue >= state.maxValue)\r\n            return {\r\n                ...state,\r\n                startValue: newValue,\r\n                isDisableSetButton: isDisableSetButton\r\n            }\r\n        }\r\n        case UPDATE_MAX_VALUE:\r\n            let newValue = action.newValue;\r\n            let startValue = state.startValue\r\n            let isDisableSetButton = (newValue < 0) || (newValue <= startValue) || (startValue < 0);\r\n            return {\r\n                ...state,\r\n                maxValue: action.newValue,\r\n                isDisableSetButton: isDisableSetButton\r\n            }\r\n\r\n        case SHOW_SETTINGS_BLOCK:\r\n            return {\r\n                ...state,\r\n                isShowSettingsBlock: true\r\n            }\r\n        case SET_SAVED_VALUE:\r\n            debugger\r\n            return {\r\n                ...state,\r\n                startValue: action.state.startValue,\r\n                maxValue: action.state.maxValue,\r\n                currentValue: action.state.startValue\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const incrementCurrentValue = () => {\r\n    return {type: INCREMENT_CURRENT_VALUE}\r\n}\r\n\r\nexport const setResetCounterValueSettings = () => {\r\n    return {type: SET_RESET_COUNTER_VALUES};\r\n}\r\n\r\n\r\nexport const updateStarsValue = (newValue) => {\r\n    return {type: UPDATE_START_VALUE, newValue};\r\n}\r\n\r\nexport const updateMaxValue = (newValue) => {\r\n    return {type: UPDATE_MAX_VALUE, newValue};\r\n}\r\n\r\nexport const showSettingsBlock = (newValue) => {\r\n    return {type: SHOW_SETTINGS_BLOCK, newValue};\r\n}\r\n\r\nexport const setSavedValues = (state) => {\r\n    return {type: SET_SAVED_VALUE, state};\r\n}\r\n\r\n","import React from 'react';\nimport {connect} from \"react-redux\";\nimport Counter2 from \"./Counter2\";\nimport {\n    incrementCurrentValue,\n    setResetCounterValueSettings, setSavedValues, showSettingsBlock,\n    updateMaxValue,\n    updateStarsValue\n} from \"../../redux/counter2Reducer\";\n\nclass Counter2Container extends React.Component {\n\n    componentDidMount = () => {\n        this.restoreState()\n    };\n\n    saveState = () => {\n        let stateAsString = JSON.stringify(this.props.state);\n        localStorage.setItem('startSettingsCounter2', stateAsString)\n    };\n\n\n    restoreState = () => {\n        let state = this.props.state;\n        let stateAsString = localStorage.getItem('startSettingsCounter2');\n        if (stateAsString) {\n            state = JSON.parse(stateAsString);\n        }\n        this.props.setSavedValues(state);\n    };\n\n\n\n    setCounterValue = () => {\n        this.props.setResetCounterValueSettings();\n        this.saveState()\n    };\n\n    resetCounterValue = () => {\n        this.props.setResetCounterValueSettings();\n    }\n\n    render() {\n        return (\n            <Counter2 {...this.props}\n                      setCounterValue={this.setCounterValue}\n                      resetCounterValue={this.resetCounterValue}\n            />\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        state: state.counter2Page\n    }\n};\n\n\nconst ConnectCounter2 = connect(mapStateToProps, {incrementCurrentValue,setResetCounterValueSettings, updateStarsValue, updateMaxValue, showSettingsBlock, setSavedValues})(Counter2Container);\nexport default ConnectCounter2;\n","import React from 'react';\nimport style from './App.module.css';\nimport Navbar from \"./Components/Navbar/Navbar\";\nimport {Route} from \"react-router-dom\";\nimport Counter1Container from \"./Components/Counter1/Counter1Container\";\nimport Counter2Container from \"./Components/Counter2/Counter2Container\";\n\nconst App = () => {\n  return (\n    <div className={style.App}>\n      <p className={style.installText}>Select counter version</p>\n      <Navbar/>\n      <Route path='/counter1' render={() => <Counter1Container/>}/>\n      <Route path='/counter2' render={() => <Counter2Container/>}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, createStore} from \"redux\";\r\nimport {counter1Reducer} from \"./counter1Reducer\";\r\nimport {counter2Reducer} from \"./counter2Reducer\";\r\n\r\n\r\nlet reducers = combineReducers({\r\n    counter1Page: counter1Reducer,\r\n    counter2Page: counter2Reducer\r\n});\r\n\r\n\r\nconst store = createStore(reducers);\r\n\r\nwindow.store = store;\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}