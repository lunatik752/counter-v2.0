{"version":3,"sources":["Components/Counter1/OutputBlock/OutputBlock.module.css","Components/Navbar/Navbar.module.css","Components/InputForSettings/InputForSettings.module.css","Components/Counter2/OutputBlock/OutputBlock.module.css","Components/Counter1/Counter1.module.css","App.module.css","Components/Counter1/SettingsBlock/SettingsBlock.module.css","Components/Counter1/SettingsBlock/ButtonsAreaSettingsBlock/ButtonsAreaSettingsBlock.module.css","Components/Button/Button.module.css","Components/Counter1/SettingsBlock/InputsAreaSettingsBlock/InputsAreaSettingsBlock.module.css","Components/Counter2/SettingsBlock/SettingsBlock.module.css","Components/Counter2/SettingsBlock/ButtonsAreaSettingsBlock/ButtonsAreaSettingsBlock.module.css","Components/Counter2/SettingsBlock/InputsAreaSettingsBlock/InputsAreaSettingsBlock.module.css","Components/Navbar/Navbar.jsx","Components/Button/Button.jsx","Components/Counter1/SettingsBlock/ButtonsAreaSettingsBlock/ButtonsAreaSettingsBlock.jsx","Components/InputForSettings/InputForSettings.jsx","Components/Counter1/SettingsBlock/InputsAreaSettingsBlock/InputsAreaSettingsBlock.jsx","Components/Counter1/SettingsBlock/SettingsBlock.jsx","Components/Counter1/OutputBlock/OutputBlock.jsx","Components/Counter1/Counter1.jsx","redux/counter1Reducer.js","Components/Counter1/Counter1Container.jsx","Components/Counter2/SettingsBlock/ButtonsAreaSettingsBlock/ButtonsAreaSettingsBlock.jsx","Components/Counter2/SettingsBlock/InputsAreaSettingsBlock/InputsAreaSettingsBlock.jsx","Components/Counter2/SettingsBlock/SettingsBlock.jsx","Components/Counter2/OutputBlock/OutputBlock.jsx","Components/Counter2/Counter2.jsx","redux/counter2Reducer.js","Components/Counter2/Counter2Container.jsx","App.jsx","serviceWorker.js","redux/store.js","index.js"],"names":["module","exports","Navbar","className","style","navbar","item","to","activeClassName","active","Button","props","button","onClick","disabled","title","ButtonsAreaSettingsBlock","buttonsArea","setCounterValueSettings","isDisableSetButton","InputForSettings","classNameInput","isInputError","input","error","inputForSettings","inputTitle","type","onChange","e","value","Number","currentTarget","inputValue","InputsAreaSettingsBlock","maxValue","startValue","inputMaxValueError","inputStartValueError","inputsArea","updateMaxValue","updateStarsValue","SettingsBlock","settingsBlock","OutputBlock","currentValue","isCorrect","outputClass","outputValue","outputValueMax","isSettingValues","isErrorSettingValues","outputBlock","outputValueWrapper","outputValueText","outputValueTextError","buttonsWrapper","incrementCurrentValue","isDisableIncButton","resetCounterValueSettings","isDisableResetButton","Counter1","counterWrapper","state","setResetCounterValueSettings","UPDATE_MAX_VALUE","initialState","Counter1Container","connect","counter1Page","dispatch","newValue","updateStarsValueAC","updateMaxValueAC","resetCounterValue","showSettingsBlock","Counter2","isShow","isShowSettingsBlock","Counter2Container","counter2Page","App","installText","path","render","Boolean","window","location","hostname","match","reducers","combineReducers","action","store","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.a5cc6110.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"outputBlock\":\"OutputBlock_outputBlock__3xNCy\",\"outputValueWrapper\":\"OutputBlock_outputValueWrapper__2s9z9\",\"outputValue\":\"OutputBlock_outputValue__5iwOp\",\"outputValueMax\":\"OutputBlock_outputValueMax__2Xclv\",\"outputValueText\":\"OutputBlock_outputValueText__3OAdr\",\"outputValueTextError\":\"OutputBlock_outputValueTextError__1xIIA\",\"buttonsWrapper\":\"OutputBlock_buttonsWrapper__3xttx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__2HW4X\",\"item\":\"Navbar_item__3L0tr\",\"active\":\"Navbar_active__UtoJW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputForSettings\":\"InputForSettings_inputForSettings__1nQiW\",\"inputTitle\":\"InputForSettings_inputTitle__sVhtz\",\"input\":\"InputForSettings_input__3sf_y\",\"error\":\"InputForSettings_error__1rlT4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"outputBlock\":\"OutputBlock_outputBlock__3vXCk\",\"outputValueWrapper\":\"OutputBlock_outputValueWrapper__MAV7t\",\"outputValue\":\"OutputBlock_outputValue__aZKAf\",\"outputValueMax\":\"OutputBlock_outputValueMax__1RJM4\",\"outputValueText\":\"OutputBlock_outputValueText__2bpud\",\"outputValueTextError\":\"OutputBlock_outputValueTextError__2NZ4B\",\"buttonsWrapper\":\"OutputBlock_buttonsWrapper__3IVHa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterWrapper\":\"Counter1_counterWrapper__6YQVi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1qccB\",\"installText\":\"App_installText__1pZNI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsBlock\":\"SettingsBlock_settingsBlock__1jAsu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonsArea\":\"ButtonsAreaSettingsBlock_buttonsArea__3jzWU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__10iAS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputsArea\":\"InputsAreaSettingsBlock_inputsArea__yqHbF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsBlock\":\"SettingsBlock_settingsBlock__2ouG3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonsArea\":\"ButtonsAreaSettingsBlock_buttonsArea__QWHpn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputsArea\":\"InputsAreaSettingsBlock_inputsArea__3QnEH\"};","import React from 'react';\nimport style from './Navbar.module.css';\nimport {NavLink} from \"react-router-dom\";\n\nfunction Navbar() {\n  return (\n    <div className={style.navbar}>\n      <div className={style.item}>\n        <NavLink to='/counter1' activeClassName={style.active}>Counter v2.0</NavLink>\n      </div>\n      <div className={style.item}>\n        <NavLink to='/counter2' activeClassName={style.active}>Counter v2.0.1</NavLink>\n      </div>\n    </div>\n  );\n}\n\nexport default Navbar;\n","import React from 'react';\nimport style from './Button.module.css';\n\n\nconst Button = (props) => {\n\n   let onButtonClick =  () => {\n       props.onClick();\n   }\n\n    return (\n        <div>\n            <button className={style.button}\n                onClick={onButtonClick}\n                disabled={props.disabled}\n            >{props.title}</button>\n        </div>\n    );\n};\n\nexport default Button;\n","import React from 'react';\nimport style from './ButtonsAreaSettingsBlock.module.css';\nimport Button from \"../../../Button/Button\";\n\n\nconst ButtonsAreaSettingsBlock = (props) => {\n    return (\n        <div className={style.buttonsArea}>\n            <Button title={'set'}\n                    onClick={props.setCounterValueSettings}\n                    disabled={props.isDisableSetButton}/>\n        </div>\n\n    );\n}\n\nexport default ButtonsAreaSettingsBlock;\n","import React from 'react';\nimport style from './InputForSettings.module.css';\n\n\nconst InputForSettings = (props) => {\n    let onValueChange = (e) => {\n        let value = Number(e.currentTarget.value);\n        props.onChange(value);\n    };\n    let classNameInput = props.isInputError ? style.input + ' ' + style.error : style.input;\n\n    return (\n        <div className={style.inputForSettings}>\n            <label className={style.inputTitle}>{props.title}</label>\n            <input  type='number'\n                    className={classNameInput}\n                    onChange={onValueChange}\n                    value={props.inputValue}/>\n        </div>\n\n    );\n}\n\nexport default InputForSettings;\n","import React from 'react';\nimport style from './InputsAreaSettingsBlock.module.css';\nimport InputForSettings from \"../../../InputForSettings/InputForSettings\";\n\n\n\nconst InputsAreaSettingsBlock = (props) => {\n\n const   maxValue = props.maxValue;\n const   startValue = props.startValue;\n\n\n    let inputMaxValueError = startValue >= maxValue;\n    let inputStartValueError = inputMaxValueError || startValue < 0;\n\n\n    return (\n        <div className={style.inputsArea}>\n            <InputForSettings title={'max value'}\n                              isInputError={inputMaxValueError}\n                              inputValue={maxValue}\n                              onChange={props.updateMaxValue}/>\n            <InputForSettings title={'start value'}\n                              isInputError={inputStartValueError}\n                              inputValue={startValue}\n                              onChange={props.updateStarsValue}\n            />\n        </div>\n    );\n}\n\nexport default InputsAreaSettingsBlock;\n","import React from 'react';\nimport style from './SettingsBlock.module.css';\nimport ButtonsAreaSettingsBlock from \"./ButtonsAreaSettingsBlock/ButtonsAreaSettingsBlock\";\nimport InputsAreaSettingsBlock from \"./InputsAreaSettingsBlock/InputsAreaSettingsBlock\";\n\n\nconst SettingsBlock = (props) => {\n\n\n    return (\n        <div className={style.settingsBlock}>\n            <InputsAreaSettingsBlock\n                startValue={props.startValue}\n                maxValue={props.maxValue}\n                updateStarsValue={props.updateStarsValue}\n                updateMaxValue={props.updateMaxValue}/>\n            <ButtonsAreaSettingsBlock\n                setCounterValueSettings={props.setCounterValueSettings}\n                isDisableSetButton={props.isDisableSetButton}/>\n\n        </div>\n    );\n}\n\nexport default SettingsBlock;\n","import React from 'react';\nimport style from './OutputBlock.module.css';\n\nimport Button from \"../../Button/Button\";\n\n\nconst OutputBlock = (props) => {\n\nconst currentValue = props.currentValue;\nconst maxValue = props.maxValue;\nconst startValue = props.startValue;\n\n\n\n    const isCorrect = props.isDisableSetButton && (maxValue > startValue) && (startValue >= 0);\n    const outputClass = currentValue < maxValue ? style.outputValue : style.outputValueMax;\n\n    const isSettingValues = !props.isDisableSetButton;\n\n    const isErrorSettingValues = (startValue >= maxValue) || (startValue < 0)\n\n\n    return (\n        <div className={style.outputBlock}>\n            <div className={style.outputValueWrapper}>\n                {isCorrect && <span className={outputClass}>{currentValue}</span>}\n                {isSettingValues && <span className={style.outputValueText}>enter values and press 'set'</span>}\n                {isErrorSettingValues && <span className={style.outputValueTextError}>Incorrect value!</span>}\n\n            </div>\n            <div className={style.buttonsWrapper}>\n                <Button title={'inc'}\n                        onClick={props.incrementCurrentValue}\n                        disabled={props.isDisableIncButton}\n                />\n                <Button title={'reset'}\n                        onClick={props.resetCounterValueSettings}\n                        disabled={props.isDisableResetButton}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default OutputBlock;\n","import React from 'react';\nimport style from './Counter1.module.css';\nimport SettingsBlock from \"./SettingsBlock/SettingsBlock\";\nimport OutputBlock from \"./OutputBlock/OutputBlock\";\n\n\nconst Counter1 = (props) => {\n    return (\n        <div className={style.counterWrapper}>\n            <SettingsBlock startValue={props.state.startValue}\n                           maxValue={props.state.maxValue}\n                           isDisableSetButton={props.state.isDisableSetButton}\n                           setCounterValueSettings={props.setResetCounterValueSettings}\n                           updateStarsValue={props.updateStarsValue}\n                           updateMaxValue={props.updateMaxValue}\n            />\n            <OutputBlock currentValue={props.state.currentValue}\n                         startValue={props.state.startValue}\n                         maxValue={props.state.maxValue}\n                         isDisableIncButton={props.state.isDisableIncButton}\n                         isDisableSetButton={props.state.isDisableSetButton}\n                         isDisableResetButton={props.state.isDisableResetButton}\n                         resetCounterValueSettings={props.setResetCounterValueSettings}\n                         incrementCurrentValue={props.incrementCurrentValue}\n\n            />\n        </div>\n    );\n}\n\n\nexport default Counter1;\n","export const INCREMENT_CURRENT_VALUE = \"counter1/reducer/INCREMENT_CURRENT_VALUE\"\r\nexport const SET_RESET_COUNTER_VALUES = \"counter1/reducer/SET_RESET_COUNTER_VALUES\"\r\nexport const UPDATE_START_VALUE = \"counter1/reducer/UPDATE_START_VALUE\"\r\nexport const UPDATE_MAX_VALUE = \"counter1/reducer/UPDATE_MAX_VALUE\"\r\n\r\n\r\nlet initialState = {\r\n    startValue: 0,\r\n    maxValue: 5,\r\n    currentValue: 0,\r\n    isDisableSetButton: true,\r\n    isDisableIncButton: false,\r\n    isDisableResetButton: false\r\n}\r\n\r\nexport const counter1Reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case INCREMENT_CURRENT_VALUE:\r\n            let currentValue = state.currentValue + 1;\r\n            let isDisableIncButton = currentValue === state.maxValue;\r\n            return {\r\n                ...state,\r\n                currentValue: currentValue,\r\n                isDisableIncButton: isDisableIncButton\r\n            }\r\n        case SET_RESET_COUNTER_VALUES:\r\n            return {\r\n                ...state,\r\n                currentValue: state.startValue,\r\n                isDisableSetButton: true,\r\n                isDisableIncButton: false,\r\n                isDisableResetButton: false\r\n\r\n            }\r\n        case UPDATE_START_VALUE: {\r\n            let newValue = action.newValue;\r\n            let isDisableSetButton = (newValue < 0) || (newValue >= state.maxValue)\r\n            return {\r\n                ...state,\r\n                startValue: newValue,\r\n                isDisableSetButton: isDisableSetButton,\r\n                isDisableIncButton: true,\r\n                isDisableResetButton: true\r\n            }\r\n        }\r\n        case UPDATE_MAX_VALUE:\r\n            let newValue = action.newValue;\r\n            let startValue = state.startValue\r\n            let isDisableSetButton = (newValue < 0) || (newValue <= startValue) || (startValue < 0);\r\n            return {\r\n                ...state,\r\n                maxValue: action.newValue,\r\n                isDisableSetButton: isDisableSetButton,\r\n                isDisableIncButton: true,\r\n                isDisableResetButton: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const incrementCurrentValueAC = () => {\r\n    return {type: INCREMENT_CURRENT_VALUE}\r\n}\r\n\r\nexport const setResetCounterValueSettingsAC = () => {\r\n    return {type: SET_RESET_COUNTER_VALUES};\r\n}\r\n\r\n\r\nexport const updateStarsValueAC = (newValue) => {\r\n    return {type: UPDATE_START_VALUE, newValue};\r\n}\r\n\r\nexport const updateMaxValueAC = (newValue) => {\r\n    return {type: UPDATE_MAX_VALUE, newValue};\r\n}\r\n\r\n\r\n","import {connect} from \"react-redux\";\nimport Counter1 from \"./Counter1\";\nimport {\n    incrementCurrentValueAC,\n    setResetCounterValueSettingsAC,\n    updateMaxValueAC,\n    updateStarsValueAC\n} from \"../../redux/counter1Reducer\";\n\n\nconst mapStateToProps = (state) => {\n    return {\n        state: state.counter1Page\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        incrementCurrentValue: () => {\n            dispatch(incrementCurrentValueAC());\n        },\n        setResetCounterValueSettings: () => {\n            dispatch(setResetCounterValueSettingsAC());\n        },\n        updateStarsValue: (newValue) => {\n            dispatch(updateStarsValueAC(newValue));\n        },\n        updateMaxValue: (newValue) => {\n            dispatch(updateMaxValueAC(newValue));\n        },\n    }\n}\n\nconst Counter1Container = connect(mapStateToProps, mapDispatchToProps)(Counter1);\nexport default Counter1Container;\n","import React from 'react';\nimport style from './ButtonsAreaSettingsBlock.module.css';\nimport Button from \"../../../Button/Button\";\n\n\nconst ButtonsAreaSettingsBlock = (props) => {\n    return (\n        <div className={style.buttonsArea}>\n            <Button title={'set'}\n                    onClick={props.setCounterValueSettings}\n                    disabled={props.isDisableSetButton}/>\n        </div>\n\n    );\n}\n\nexport default ButtonsAreaSettingsBlock;\n","import React from 'react';\nimport style from './InputsAreaSettingsBlock.module.css';\nimport InputForSettings from \"../../../InputForSettings/InputForSettings\";\n\n\n\nconst InputsAreaSettingsBlock = (props) => {\n\n const   maxValue = props.maxValue;\n const   startValue = props.startValue;\n\n\n    let inputMaxValueError = startValue >= maxValue;\n    let inputStartValueError = inputMaxValueError || startValue < 0;\n\n\n    return (\n        <div className={style.inputsArea}>\n            <InputForSettings title={'max value'}\n                              isInputError={inputMaxValueError}\n                              inputValue={maxValue}\n                              onChange={props.updateMaxValue}/>\n            <InputForSettings title={'start value'}\n                              isInputError={inputStartValueError}\n                              inputValue={startValue}\n                              onChange={props.updateStarsValue}\n            />\n        </div>\n    );\n}\n\nexport default InputsAreaSettingsBlock;\n","import React from 'react';\nimport style from './SettingsBlock.module.css';\nimport ButtonsAreaSettingsBlock from \"./ButtonsAreaSettingsBlock/ButtonsAreaSettingsBlock\";\nimport InputsAreaSettingsBlock from \"./InputsAreaSettingsBlock/InputsAreaSettingsBlock\";\n\n\nconst SettingsBlock = (props) => {\n\n    return (\n        <div className={style.settingsBlock}>\n            <InputsAreaSettingsBlock\n                startValue={props.startValue}\n                maxValue={props.maxValue}\n                updateStarsValue={props.updateStarsValue}\n                updateMaxValue={props.updateMaxValue}/>\n            <ButtonsAreaSettingsBlock\n                setCounterValueSettings={props.setCounterValueSettings}\n                isDisableSetButton={props.isDisableSetButton}/>\n        </div>\n    );\n}\n\nexport default SettingsBlock;\n","import React from 'react';\nimport style from './OutputBlock.module.css';\nimport Button from \"../../Button/Button\";\n\n\nconst OutputBlock = (props) => {\n\n    const currentValue = props.currentValue;\n    const maxValue = props.maxValue;\n\n    const outputClass = currentValue < maxValue ? style.outputValue : style.outputValueMax;\n\n    return (\n        <div className={style.outputBlock}>\n            <div className={style.outputValueWrapper}>\n                <span className={outputClass}>{currentValue}</span>\n            </div>\n            <div className={style.buttonsWrapper}>\n                <Button title={'inc'}\n                        onClick={props.incrementCurrentValue}\n                        disabled={props.isDisableIncButton}\n                />\n                <Button title={'reset'}\n                        onClick={props.resetCounterValue}\n                        disabled={props.isDisableResetButton}\n                />\n                <Button title={'set'}\n                        onClick={props.showSettingsBlock}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default OutputBlock;\n","import React from 'react';\nimport style from \"../Counter1/Counter1.module.css\";\nimport SettingsBlock from \"./SettingsBlock/SettingsBlock\";\nimport OutputBlock from \"./OutputBlock/OutputBlock\";\n\n\nconst Counter2 = (props) => {\n\n    let isShow = props.state.isShowSettingsBlock;\n\n    return (\n        <div className={style.counterWrapper}>\n            {isShow && <SettingsBlock startValue={props.state.startValue}\n                                      maxValue={props.state.maxValue}\n                                      isDisableSetButton={props.state.isDisableSetButton}\n                                      setCounterValueSettings={props.setResetCounterValueSettings}\n                                      updateStarsValue={props.updateStarsValue}\n                                      updateMaxValue={props.updateMaxValue}\n            />}\n            {!isShow && <OutputBlock currentValue={props.state.currentValue}\n                                     startValue={props.state.startValue}\n                                     maxValue={props.state.maxValue}\n                                     isDisableIncButton={props.state.isDisableIncButton}\n                                     resetCounterValue={props.setResetCounterValueSettings}\n                                     incrementCurrentValue={props.incrementCurrentValue}\n                                     showSettingsBlock={props.showSettingsBlock}\n\n            />}\n        </div>\n    );\n}\n\nexport default Counter2;\n","export const INCREMENT_CURRENT_VALUE = \"counter2/reducer/INCREMENT_CURRENT_VALUE\"\r\nexport const SET_RESET_COUNTER_VALUES = \"counter2/reducer/SET_RESET_COUNTER_VALUES\"\r\nexport const UPDATE_START_VALUE = \"counter2/reducer/UPDATE_START_VALUE\"\r\nexport const UPDATE_MAX_VALUE = \"counter2/reducer/UPDATE_MAX_VALUE\"\r\nexport const SHOW_SETTINGS_BLOCK = \"counter2/reducer/SHOW_SETTINGS_BLOCK\"\r\n\r\n\r\nlet initialState = {\r\n    startValue: 0,\r\n    maxValue: 5,\r\n    currentValue: 0,\r\n    isDisableIncButton: false,\r\n    isDisableSetButton: false,\r\n    isShowSettingsBlock: false\r\n}\r\n\r\nexport  const counter2Reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case INCREMENT_CURRENT_VALUE:\r\n            let currentValue = state.currentValue + 1;\r\n            let isDisableIncButton = currentValue === state.maxValue;\r\n            return {\r\n                ...state,\r\n                currentValue: currentValue,\r\n                isDisableIncButton: isDisableIncButton\r\n            }\r\n        case SET_RESET_COUNTER_VALUES:\r\n            return {\r\n                ...state,\r\n                currentValue: state.startValue,\r\n                isShowSettingsBlock: false,\r\n                isDisableIncButton: false,\r\n            }\r\n        case UPDATE_START_VALUE: {\r\n            let newValue = action.newValue;\r\n            let isDisableSetButton = (newValue < 0) || (newValue >= state.maxValue)\r\n            return {\r\n                ...state,\r\n                startValue: newValue,\r\n                isDisableSetButton: isDisableSetButton\r\n            }\r\n        }\r\n        case UPDATE_MAX_VALUE:\r\n            let newValue = action.newValue;\r\n            let startValue = state.startValue\r\n            let isDisableSetButton = (newValue < 0) || (newValue <= startValue) || (startValue < 0);\r\n            return {\r\n                ...state,\r\n                maxValue: action.newValue,\r\n                isDisableSetButton: isDisableSetButton\r\n            }\r\n\r\n        case SHOW_SETTINGS_BLOCK:\r\n            return {\r\n                ...state,\r\n                isShowSettingsBlock: true\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const incrementCurrentValueAC = () => {\r\n    return {type: INCREMENT_CURRENT_VALUE}\r\n}\r\n\r\nexport const setResetCounterValueSettingsAC = () => {\r\n    return {type: SET_RESET_COUNTER_VALUES};\r\n}\r\n\r\n\r\nexport const updateStarsValueAC = (newValue) => {\r\n    return {type: UPDATE_START_VALUE, newValue};\r\n}\r\n\r\nexport const updateMaxValueAC = (newValue) => {\r\n    return {type: UPDATE_MAX_VALUE, newValue};\r\n}\r\n\r\nexport const showSettingsBlockAC = (newValue) => {\r\n    return {type: SHOW_SETTINGS_BLOCK, newValue};\r\n}\r\n\r\n\r\n","import {connect} from \"react-redux\";\nimport Counter2 from \"./Counter2\";\nimport {\n    incrementCurrentValueAC,\n    setResetCounterValueSettingsAC, showSettingsBlockAC,\n    updateMaxValueAC,\n    updateStarsValueAC\n} from \"../../redux/counter2Reducer\";\n\n\nconst mapStateToProps = (state) => {\n    return {\n        state: state.counter2Page\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        incrementCurrentValue: () => {\n            dispatch(incrementCurrentValueAC());\n        },\n        setResetCounterValueSettings: () => {\n            dispatch(setResetCounterValueSettingsAC());\n        },\n        updateStarsValue: (newValue) => {\n            dispatch(updateStarsValueAC(newValue));\n        },\n        updateMaxValue: (newValue) => {\n            dispatch(updateMaxValueAC(newValue));\n        },\n        showSettingsBlock: () => {\n            dispatch(showSettingsBlockAC());\n        }\n    }\n}\n\nconst Counter2Container = connect(mapStateToProps, mapDispatchToProps)(Counter2);\nexport default Counter2Container;\n","import React from 'react';\nimport style from './App.module.css';\nimport Navbar from \"./Components/Navbar/Navbar\";\nimport {Route} from \"react-router-dom\";\nimport Counter1Container from \"./Components/Counter1/Counter1Container\";\nimport Counter2Container from \"./Components/Counter2/Counter2Container\";\n\nconst App = () => {\n  return (\n    <div className={style.App}>\n      <p className={style.installText}>Select counter version</p>\n      <Navbar/>\n      <Route path='/counter1' render={() => <Counter1Container/>}/>\n      <Route path='/counter2' render={() => <Counter2Container/>}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, createStore} from \"redux\";\r\nimport {counter1Reducer} from \"./counter1Reducer\";\r\nimport {counter2Reducer} from \"./counter2Reducer\";\r\n\r\n\r\nlet reducers = combineReducers({\r\n    counter1Page: counter1Reducer,\r\n    counter2Page: counter2Reducer\r\n});\r\n\r\n\r\nconst store = createStore(reducers);\r\n\r\nwindow.store = store;\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}